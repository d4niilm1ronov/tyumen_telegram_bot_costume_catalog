import json

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from regex import regex

from filters.all_filters import IsAdmin
from func_utils import get_current_time
from handlers.edit import arr_del_msg
from loader import dp
import sqlite_utils
from aiogram.types import *
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardButton as IKButton
from aiogram.types import InlineKeyboardMarkup as IKMarkup

from state import admin

arr_timeout_warning_del_collection = {}
arr_timeout_warning_del_full_collection = {}
arr_timeout_warning_del_costume = {}

warning_del_collection = "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n–£–¥–∞–ª—è—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –í—ã –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û —Å—Ç–∏—Ä–∞–µ—Ç–µ –µ–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –°–û–•–†–ê–ù–Ø–Ø –ö–û–°–¢–Æ–ú–´ –í –ê–†–•–ò–í (üóÇÔ∏è).\n\n–ò–ù–°–¢–†–£–ö–¶–ò–Ø\n–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö, –Ω–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞ –∫–Ω–æ–ø–∫—É."
warning_del_full_collection = "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n–£–¥–∞–ª—è—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –í—ã –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û –£–î–ê–õ–Ø–ï–¢–ï –ò –ö–û–°–¢–Æ–ú–´.\n\n–ò–ù–°–¢–†–£–ö–¶–ò–Ø\n–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö, –Ω–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞ –∫–Ω–æ–ø–∫—É."
warning_del_costume = "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –í—ã –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û –£–î–ê–õ–Ø–ï–¢–ï –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—Å—Ç—é–º–µ\n\n–ò–ù–°–¢–†–£–ö–¶–ò–Ø\n–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö, –Ω–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞ –∫–Ω–æ–ø–∫—É."


@dp.callback_query_handler(lambda c: c.data == "close_admin_panel")
async def close_admin_panel(cbq: CallbackQuery):
    await cbq.message.delete()


@dp.callback_query_handler(lambda c: c.data.startswith("del_collectionID"))
async def del_collectionID(cbq: CallbackQuery):
    id_user = cbq.from_user.id

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    if arr_timeout_warning_del_collection.get(id_user) is None:
        await cbq.answer(warning_del_collection, True)
        arr_timeout_warning_del_collection[id_user] = datetime.now() + timedelta(minutes=2)
        return
    elif arr_timeout_warning_del_collection[id_user] < datetime.now():
        await cbq.answer(warning_del_collection, True)
        arr_timeout_warning_del_collection[id_user] = datetime.now() + timedelta(minutes=2)
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ cbq data
    if cbq.data.split("del_collectionID")[1].isdigit() is False:
        await cbq.message.answer("‚õîÔ∏è –û—à–∏–±–∫–∞ (#28gyh79ef34). –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /start –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        return

    id_collection = int(cbq.data.split("del_collectionID")[1])
    name_collection = sqlite_utils.get_name_collection(id_collection)[0]
    count_collection = sqlite_utils.remove_collection(id_collection)

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="show_collection_page1"))
    kb.add(InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Å—Ç—é–º—ã", callback_data="show_collection_id0"))
    kb.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="back_menu"))

    if count_collection:
        link = '–ï–µ –∫–æ—Å—Ç—é–º—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã <a href="t.me/zhekahelp_bot?start=collection0">—Å—é–¥–∞</a>.'
    else:
        link = ''

    await cbq.message.edit_text(f"üóë –ö–æ–ª–ª–µ–∫—Ü–∏—è <b>¬´{name_collection}¬ª</b> —É–¥–∞–ª–µ–Ω–∞. {link}", reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith("del_full_collectionID"))
async def del_full_collectionID(cbq: CallbackQuery):
    id_user = cbq.from_user.id

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    if arr_timeout_warning_del_full_collection.get(id_user) is None:
        await cbq.answer(warning_del_full_collection, True)
        arr_timeout_warning_del_full_collection[id_user] = datetime.now() + timedelta(minutes=2)
        return
    elif arr_timeout_warning_del_full_collection[id_user] < datetime.now():
        await cbq.answer(warning_del_full_collection, True)
        arr_timeout_warning_del_full_collection[id_user] = datetime.now() + timedelta(minutes=2)
        return

    arr_timeout_warning_del_full_collection[id_user] = datetime.now() + timedelta(minutes=2)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ cbq data
    if cbq.data.split("del_full_collectionID")[1].isdigit() is False:
        await cbq.message.answer("‚õîÔ∏è –û—à–∏–±–∫–∞ (#Z123978V). –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /start –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        return

    id_collection = int(cbq.data.split("del_full_collectionID")[1])
    name_collection = sqlite_utils.get_name_collection(id_collection)[0]
    sqlite_utils.remove_full_collection(id_collection)

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="show_collection_page1"))
    kb.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="back_menu"))

    await cbq.message.edit_text(f"üî• –ö–æ–ª–ª–µ–∫—Ü–∏—è <b>¬´{name_collection}¬ª</b> –∏ –µ–µ –∫–æ—Å—Ç—é–º—ã —É–¥–∞–ª–µ–Ω—ã.", reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith("del_costumeID"))
async def del_costumeID(cbq: CallbackQuery):
    id_user = cbq.from_user.id

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    if arr_timeout_warning_del_costume.get(id_user) is None:
        await cbq.answer(warning_del_costume, True)
        arr_timeout_warning_del_costume[id_user] = datetime.now() + timedelta(minutes=2)
        return
    elif arr_timeout_warning_del_costume[id_user] < datetime.now():
        await cbq.answer(warning_del_costume, True)
        arr_timeout_warning_del_costume[id_user] = datetime.now() + timedelta(minutes=2)
        return

    arr_timeout_warning_del_costume[id_user] = datetime.now() + timedelta(minutes=2)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ cbq data
    if cbq.data.split("del_costumeID")[1].isdigit() is False:
        await cbq.message.answer("‚õîÔ∏è –û—à–∏–±–∫–∞ (#X203X18). –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /start –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        return

    id_costume = int(cbq.data.split("del_costumeID")[1])

    costume = sqlite_utils.get_costume(id_costume)
    id_collection = int(costume[1])
    name_collection = costume[2]
    sqlite_utils.remove_costume(id_costume)

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å {name_collection}", callback_data=f"show_collection_id{id_collection}"))
    kb.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="show_collection_page1"))
    kb.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–æ—Å—Ç—é–º—ã", callback_data="show_collection_id0"))
    kb.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="back_menu"))

    await cbq.message.edit_text(f"üóë –ö–æ—Å—Ç—é–º <b>¬´{name_collection}¬ª</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=kb)


# =====================================================================================================================

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == "admin_panel", state="*")
async def open_admin_panel(cbq: CallbackQuery, state: FSMContext):
    try:
        await state.finish()
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        kb = IKMarkup()
        kb.add(IKButton("–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_add_moderator"))
        kb.add(IKButton("–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_del_moderator"))
        kb.add(IKButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="admin_edit_contact"))
        kb.add(IKButton("–ù–∞–∑–∞–¥", callback_data="back_menu"))
        await cbq.message.edit_text(text, reply_markup=kb)
    except Exception as ex:
        print(get_current_time(), "[–û–®–ò–ë–ö–ê] {open_admin_panel}", f"({cbq.from_user.mention})", ex)


# =====================================================================================================================


@dp.callback_query_handler(IsAdmin(), lambda c: c.data == "admin_add_moderator")
async def admin_add_moderator(cbq: CallbackQuery, state: FSMContext):
    try:
        await admin.Panel.wait_add_moderator.set()
        text = "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
        kb = IKMarkup()
        kb.add(IKButton("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID?", callback_data="help_admin_add_moderator"))
        kb.add(IKButton("–ù–∞–∑–∞–¥", callback_data="admin_panel"))
        await cbq.message.edit_text(text, reply_markup=kb)
    except Exception as ex:
        print(get_current_time(), "[–û–®–ò–ë–ö–ê] {admin_add_moderator}", f"({cbq.from_user.mention})", ex)


@dp.callback_query_handler(IsAdmin(), lambda c: c.data == "help_admin_add_moderator", state="*")
async def help_admin_add_moderator(cbq: CallbackQuery, state: FSMContext):
    try:
        text = "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n\n<b>–ö–∞–∫ —É–∑–Ω–∞—Ç—å ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞?</b>\n"
        text += "<code>–í–∞—Ä–∏–∞–Ω—Ç 1. </code>–ü–µ—Ä–µ—Å–ª–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º "
        text += "–≤ <a href='t.me/getidsbot'>GetIDs Bot</a>. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω <code>id</code>;\n"
        text += "<code>–í–∞—Ä–∏–∞–Ω—Ç 2. </code>–ú–æ–¥–µ—Ä —Å–∞–º –Ω–∞–ø–∏—à–µ—Ç –≤ <a href='t.me/getidsbot'>GetIDs Bot</a> "
        text += "–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –ø–æ–ª—É—á–µ–Ω—ã–π ID."
        kb = IKMarkup()
        kb.add(IKButton("–ù–∞–∑–∞–¥", callback_data="admin_panel"))
        await cbq.message.edit_text(text, reply_markup=kb)
    except Exception as ex:
        print(get_current_time(), "[–û–®–ò–ë–ö–ê] {help_admin_add_moderator}", f"({cbq.from_user.mention})", ex)


@dp.message_handler(IsAdmin(), lambda m: m.text.isdigit(), state=admin.Panel.wait_add_moderator)
async def input_admin_add_moderator(msg: Message, state: FSMContext):
    try:
        kb = IKMarkup()
        if sqlite_utils.its_moder(msg.text):
            kb.add(IKButton("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID?", callback_data="help_admin_add_moderator"))
            kb.add(IKButton("–ù–∞–∑–∞–¥", callback_data="admin_panel"))
            text = "üò≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º (–∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)"
        else:
            sqlite_utils.add_moder(msg.from_user.id)
            kb.add(IKButton("–û—Ç", callback_data="admin_panel"))
            text = f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {sqlite_utils.get_username(msg.from_user.id)} –¥–æ–±–∞–≤–ª–µ–Ω!"
            await state.finish()
        await msg.answer(text, reply_markup=kb)
    except Exception as ex:
        print(get_current_time(), "[–û–®–ò–ë–ö–ê] {input_admin_add_moderator}", f"({msg.from_user.mention})", ex)


# =====================================================================================================================


@dp.callback_query_handler(IsAdmin(), lambda c: c.data == "admin_del_moderator")
async def admin_del_moderator(cbq: CallbackQuery, state: FSMContext):
    try:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å"
        kb = IKMarkup()

        for id_moder in json.loads(sqlite_utils.get_one("config", "value", "name = 'arr_moder_id'", True)[0]):
            kb.add(IKButton(sqlite_utils.get_username(id_moder), callback_data=f"admin_del_moderator_id{id_moder}"))

        if len(kb.inline_keyboard) == 0:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç—É –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ —Å—á–∏—Ç–∞—Ç—å –≤–∞—Å)..."
            kb.add(IKButton("–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_add_moderator"))
        kb.add(IKButton("–ù–∞–∑–∞–¥", callback_data="admin_panel"))
        await cbq.message.edit_text(text, reply_markup=kb)
    except Exception as ex:
        print(get_current_time(), "[–û–®–ò–ë–ö–ê] {admin_del_moderator}", f"({cbq.from_user.mention})", ex)


@dp.callback_query_handler(IsAdmin(), lambda c: c.data.startswith("admin_del_moderator_id"))
async def admin_del_moderator_id(cbq: CallbackQuery, state: FSMContext):
    try:
        sqlite_utils.del_moder(int(cbq.data.split("admin_del_moderator_id")[1]))
        text = "‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω!"
        kb = IKMarkup()
        kb.add(IKButton("–£–¥–∞–ª–∏—Ç—å –µ—â–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_del_moderator"))
        kb.add(IKButton("–ù–∞–∑–∞–¥", callback_data="admin_panel"))
        await cbq.message.edit_text(text, reply_markup=kb)
    except Exception as ex:
        print(get_current_time(), "[–û–®–ò–ë–ö–ê] {admin_del_moderator_id}", f"({cbq.from_user.mention})", ex)


# =====================================================================================================================

@dp.callback_query_handler(IsAdmin(), lambda c: c.data == "admin_edit_contact")
async def admin_edit_contact(cbq: CallbackQuery, state: FSMContext):
    try:
        await admin.Panel.wait_edit_contact.set()
        text = "<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (@username) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –∏–ª–∏ "
        text += "—Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Å –¥—Ä—É–≥–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –í–ö–æ–Ω—Ç–∞–∫—Ç–µ).</b>\n\n"
        text += "–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –Ω–∞–ø–æ–¥–æ–±–∏–µ <code>–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º</code>, –∫–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—Å–æ–≤–∞–Ω –Ω–∞ –∞–¥—Ä–µ—Å, "
        text += "–∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"
        kb = IKMarkup()
        kb.add(IKButton("–ù–∞–∑–∞–¥", callback_data="admin_panel"))
        await cbq.message.edit_text(text, reply_markup=kb)
    except Exception as ex:
        print(get_current_time(), "[–û–®–ò–ë–ö–ê] {admin_edit_contact}", f"({cbq.from_user.mention})", ex)


@dp.message_handler(IsAdmin(), state=admin.Panel.wait_edit_contact)
async def input_admin_edit_contact(msg: Message, state: FSMContext):
    try:
        stroka = msg.text
        res_url = ""
        text = "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç c –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–∑–º–µ–Ω–µ–Ω–∞!"
        kb = IKMarkup()
        kb.add(IKButton("–ù–∞–∑–∞–¥", callback_data="admin_panel"))
        if regex.match(r'(https?://|www.|)t.me/[A-Za-z0-9]', stroka):
            res_url = "t.me/" + stroka.split('/').pop()
        elif regex.match(r'@[A-Za-z0-9]', stroka):
            res_url = "t.me/" + stroka[1:]
        elif regex.match(r"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", stroka):
            res_url = stroka
        if res_url == "":
            text = "‚ÅâÔ∏è –°—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
        else:
            sqlite_utils.update("config", "value", res_url, "name = 'contact_url'")
            await state.finish()
        await msg.answer(text, reply_markup=kb)
    except Exception as ex:
        print(get_current_time(), "[–û–®–ò–ë–ö–ê] {input_admin_edit_contact}", f"({msg.from_user.mention})", ex)

# =====================================================================================================================
